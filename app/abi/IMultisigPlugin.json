{"abi":[{"type":"function","name":"checkNSignatures","inputs":[{"name":"actualGasDigest","type":"bytes32","internalType":"bytes32"},{"name":"maxGasDigest","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"},{"name":"signatures","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"firstFailure","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"eip712Domain","inputs":[],"outputs":[{"name":"fields","type":"bytes1","internalType":"bytes1"},{"name":"name","type":"string","internalType":"string"},{"name":"version","type":"string","internalType":"string"},{"name":"chainId","type":"uint256","internalType":"uint256"},{"name":"verifyingContract","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"extensions","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"encodeMessageData","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"message","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getMessageHash","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"message","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"isOwnerOf","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"ownerToCheck","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"ownershipInfoOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateOwnership","inputs":[{"name":"ownersToAdd","type":"address[]","internalType":"address[]"},{"name":"ownersToRemove","type":"address[]","internalType":"address[]"},{"name":"newThreshold","type":"uint128","internalType":"uint128"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnerUpdated","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"addedOwners","type":"address[]","indexed":false,"internalType":"address[]"},{"name":"removedOwners","type":"address[]","indexed":false,"internalType":"address[]"},{"name":"threshold","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"ECDSARecoverFailure","inputs":[]},{"type":"error","name":"EmptyOwnersNotAllowed","inputs":[]},{"type":"error","name":"InvalidAddress","inputs":[]},{"type":"error","name":"InvalidMaxFeePerGas","inputs":[]},{"type":"error","name":"InvalidMaxPriorityFeePerGas","inputs":[]},{"type":"error","name":"InvalidNumSigsOnActualGas","inputs":[]},{"type":"error","name":"InvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"InvalidPreVerificationGas","inputs":[]},{"type":"error","name":"InvalidSigLength","inputs":[]},{"type":"error","name":"InvalidSigOffset","inputs":[]},{"type":"error","name":"InvalidThreshold","inputs":[]},{"type":"error","name":"OwnerDoesNotExist","inputs":[{"name":"owner","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkNSignatures(bytes32,bytes32,address,bytes)":"b139ec63","eip712Domain()":"84b0196e","encodeMessageData(address,bytes)":"197ea35b","getMessageHash(address,bytes)":"8616d61d","isOwnerOf(address,address)":"f582bceb","ownershipInfoOf(address)":"6bbefc89","updateOwnership(address[],address[],uint128)":"6a0cb06d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSARecoverFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyOwnersNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxFeePerGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxPriorityFeePerGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumSigsOnActualGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPreVerificationGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigOffset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addedOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"removedOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actualGasDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"maxGasDigest\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkNSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"firstFailure\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"encodeMessageData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerToCheck\",\"type\":\"address\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownershipInfoOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ownersToAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"ownersToRemove\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"newThreshold\",\"type\":\"uint128\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnerUpdated(address,address[],address[],uint256)\":{\"params\":{\"account\":\"The account whose ownership changed.\",\"addedOwners\":\"The address array of added owners.\",\"removedOwners\":\"The address array of removed owners.\",\"threshold\":\"The new threshold. A threshold of 0 could mean that there isn't a change in threshold.\"}}},\"kind\":\"dev\",\"methods\":{\"checkNSignatures(bytes32,bytes32,address,bytes)\":{\"params\":{\"account\":\"The account to check the signatures for.\",\"actualGasDigest\":\"The hash of the message.\",\"maxGasDigest\":\"The hash of the digest.\",\"signatures\":\"The signatures to check.\"},\"returns\":{\"firstFailure\":\"Index of the first failed signature if the signature failed\",\"success\":\"True if the signatures are valid.\"}},\"eip712Domain()\":{\"details\":\"This implementation is different from typical 712 via its use of msg.sender instead. As such, it should only be called from the SCAs that has installed this. See ERC-5267.\"},\"encodeMessageData(address,bytes)\":{\"details\":\"Assumes that the SCA's implementation of `domainSeparator` is this plugin's\",\"params\":{\"account\":\"SCA to build the message encoding for\",\"message\":\"Message that should be encoded.\"},\"returns\":{\"_0\":\"Encoded message.\"}},\"getMessageHash(address,bytes)\":{\"params\":{\"account\":\"SCA to build the message hash for\",\"message\":\"Message that should be hashed.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"isOwnerOf(address,address)\":{\"params\":{\"account\":\"The account to check.\",\"ownerToCheck\":\"The owner to check if it is an owner of the provided account.\"},\"returns\":{\"_0\":\"True if the address is an owner of the account.\"}},\"ownershipInfoOf(address)\":{\"params\":{\"account\":\"The account to get the owners of.\"},\"returns\":{\"_0\":\"The addresses of the owners of the account, and the threshold\"}},\"updateOwnership(address[],address[],uint128)\":{\"details\":\"This function is installed on the account as part of plugin installation, and should only be called from an account.\",\"params\":{\"newThreshold\":\"The new threshold. 0 for no change.\",\"ownersToAdd\":\"The address array of owners to be added.\",\"ownersToRemove\":\"The address array of owners to be removed.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnerUpdated(address,address[],address[],uint256)\":{\"notice\":\"This event is emitted when owners of the account are updated.\"}},\"kind\":\"user\",\"methods\":{\"checkNSignatures(bytes32,bytes32,address,bytes)\":{\"notice\":\"Check if the signatures are valid for the account.\"},\"eip712Domain()\":{\"notice\":\"Gets the EIP712 domain\"},\"encodeMessageData(address,bytes)\":{\"notice\":\"Returns the pre-image of the message hash\"},\"getMessageHash(address,bytes)\":{\"notice\":\"Returns hash of a message that can be signed by owners.\"},\"isOwnerOf(address,address)\":{\"notice\":\"Check if an address is an owner of `account`.\"},\"ownershipInfoOf(address)\":{\"notice\":\"Get the owners of `account`, and the threshold.\"},\"updateOwnership(address[],address[],uint128)\":{\"notice\":\"Update owners of the account, and/or threshold\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IMultisigPlugin.sol\":\"IMultisigPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@alchemy/light-account/=lib/modular-account/lib/light-account/\",\":@alchemy/modular-account/=lib/modular-account/\",\":@eth-infinitism/account-abstraction/=lib/account-abstraction/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":light-account/=lib/modular-account/lib/light-account/\",\":modular-account/=lib/modular-account/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"src/IMultisigPlugin.sol\":{\"keccak256\":\"0x3f3d8132b7329023dd061b3f45437a5eb5ee00363edcd2eeb5eb937077901e2e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://124a98db10db01d86a54c3efc9a8054b71bb7e67105167615ce1e42d506f34a1\",\"dweb:/ipfs/QmRxhUDx6LbwWwRibgS5GVYP8iKSqbxg5pQEqUKtuH7dSz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.22+commit.4fc1097e"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ECDSARecoverFailure"},{"inputs":[],"type":"error","name":"EmptyOwnersNotAllowed"},{"inputs":[],"type":"error","name":"InvalidAddress"},{"inputs":[],"type":"error","name":"InvalidMaxFeePerGas"},{"inputs":[],"type":"error","name":"InvalidMaxPriorityFeePerGas"},{"inputs":[],"type":"error","name":"InvalidNumSigsOnActualGas"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"InvalidOwner"},{"inputs":[],"type":"error","name":"InvalidPreVerificationGas"},{"inputs":[],"type":"error","name":"InvalidSigLength"},{"inputs":[],"type":"error","name":"InvalidSigOffset"},{"inputs":[],"type":"error","name":"InvalidThreshold"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnerDoesNotExist"},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address[]","name":"addedOwners","type":"address[]","indexed":false},{"internalType":"address[]","name":"removedOwners","type":"address[]","indexed":false},{"internalType":"uint256","name":"threshold","type":"uint256","indexed":false}],"type":"event","name":"OwnerUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"actualGasDigest","type":"bytes32"},{"internalType":"bytes32","name":"maxGasDigest","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"stateMutability":"view","type":"function","name":"checkNSignatures","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"firstFailure","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"stateMutability":"view","type":"function","name":"encodeMessageData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"stateMutability":"view","type":"function","name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"ownerToCheck","type":"address"}],"stateMutability":"view","type":"function","name":"isOwnerOf","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"ownershipInfoOf","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"ownersToAdd","type":"address[]"},{"internalType":"address[]","name":"ownersToRemove","type":"address[]"},{"internalType":"uint128","name":"newThreshold","type":"uint128"}],"stateMutability":"nonpayable","type":"function","name":"updateOwnership"}],"devdoc":{"kind":"dev","methods":{"checkNSignatures(bytes32,bytes32,address,bytes)":{"params":{"account":"The account to check the signatures for.","actualGasDigest":"The hash of the message.","maxGasDigest":"The hash of the digest.","signatures":"The signatures to check."},"returns":{"firstFailure":"Index of the first failed signature if the signature failed","success":"True if the signatures are valid."}},"eip712Domain()":{"details":"This implementation is different from typical 712 via its use of msg.sender instead. As such, it should only be called from the SCAs that has installed this. See ERC-5267."},"encodeMessageData(address,bytes)":{"details":"Assumes that the SCA's implementation of `domainSeparator` is this plugin's","params":{"account":"SCA to build the message encoding for","message":"Message that should be encoded."},"returns":{"_0":"Encoded message."}},"getMessageHash(address,bytes)":{"params":{"account":"SCA to build the message hash for","message":"Message that should be hashed."},"returns":{"_0":"Message hash."}},"isOwnerOf(address,address)":{"params":{"account":"The account to check.","ownerToCheck":"The owner to check if it is an owner of the provided account."},"returns":{"_0":"True if the address is an owner of the account."}},"ownershipInfoOf(address)":{"params":{"account":"The account to get the owners of."},"returns":{"_0":"The addresses of the owners of the account, and the threshold"}},"updateOwnership(address[],address[],uint128)":{"details":"This function is installed on the account as part of plugin installation, and should only be called from an account.","params":{"newThreshold":"The new threshold. 0 for no change.","ownersToAdd":"The address array of owners to be added.","ownersToRemove":"The address array of owners to be removed."}}},"version":1},"userdoc":{"kind":"user","methods":{"checkNSignatures(bytes32,bytes32,address,bytes)":{"notice":"Check if the signatures are valid for the account."},"eip712Domain()":{"notice":"Gets the EIP712 domain"},"encodeMessageData(address,bytes)":{"notice":"Returns the pre-image of the message hash"},"getMessageHash(address,bytes)":{"notice":"Returns hash of a message that can be signed by owners."},"isOwnerOf(address,address)":{"notice":"Check if an address is an owner of `account`."},"ownershipInfoOf(address)":{"notice":"Get the owners of `account`, and the threshold."},"updateOwnership(address[],address[],uint128)":{"notice":"Update owners of the account, and/or threshold"}},"version":1}},"settings":{"remappings":["@alchemy/light-account/=lib/modular-account/lib/light-account/","@alchemy/modular-account/=lib/modular-account/","@eth-infinitism/account-abstraction/=lib/account-abstraction/contracts/","@openzeppelin/=lib/openzeppelin-contracts/","account-abstraction/=lib/account-abstraction/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","light-account/=lib/modular-account/lib/light-account/","modular-account/=lib/modular-account/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IMultisigPlugin.sol":"IMultisigPlugin"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/IMultisigPlugin.sol":{"keccak256":"0x3f3d8132b7329023dd061b3f45437a5eb5ee00363edcd2eeb5eb937077901e2e","urls":["bzz-raw://124a98db10db01d86a54c3efc9a8054b71bb7e67105167615ce1e42d506f34a1","dweb:/ipfs/QmRxhUDx6LbwWwRibgS5GVYP8iKSqbxg5pQEqUKtuH7dSz"],"license":"GPL-3.0-or-later"}},"version":1},"id":95}